#!/bin/bash

#####################
##################### SBPkgTools
##################### Written by Farshief
##################### https://www.github.com/farshief/sbpkgtools
#####################

### Variable Definitions
SBPVer=1.2.0
packagesDir=/packages
pkgbuildpath=$packagesDir/build
pkglogs=$pkgbuildpath/logs
REPO_core=$packagesDir/repo/core
Toolname="SBPkgTools"
DBpath=$packagesDir/packages.db

### Function Definitions
## YAML Parsing
## Function by Stefan Farestam as posted here: https://stackoverflow.com/a/21189044
function parse_yaml {
   local prefix=$2
   local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
   sed -ne "s|^\($s\):|\1|" \
        -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
   awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
      }
   }'
}

## SBOut script - To print messages to the user in a standardized format
function sbout {
   local message=$1
   echo
   echo "*******"
   echo "***$Toolname: $message"
   echo "*******"
   echo
}

## DBWrite - Add new entry to DB

## Help Script
function help {
   echo "Usage:"
   echo "    sbp {-m|-i|-r} package_name"
   echo "    sbp {--make|--install|--remove} package_name"
   echo "    sbp [-v|-h|--version|--help]"
   echo
   echo "$Toolname: Simple Bash Package Management Tools (Designed for LFS)"
   echo "This script needs build scripts to function and is designed to take one option at a time"
   echo
   echo "Options:"
   echo "    -v, --version	Prints the current script version"
   echo "    -m, --make		Runs Build Script and creates package for installation"
   echo "    -i, --install	Installs a built package to an LFS system"
   echo "    -r, --remove	Removes an installed package from an LFS system"
   echo "    -h, --help		Prints this help message"
}

## Make Script
function sbpmake {
   echo $1
}

## Install Script
function sbpinstall {
   echo "."
}

## Remove Script
function sbpremove {
   echo ":"
}

### Actual Start of the User Interactive Script


## Parameter Handling
#***Reformat tabbing here in kate
if [ $# -eq 0 ] # If no args are passed display help
    then
        help
        exit 2
fi

while getopts ":vm:i:r:h-:" option; do
   case $option in
      v) # Print Version
	 sbout "Package Management Scripts-V$SBPVer"
	 exit
         ;;
      m) # Make Script
         sbpmake $OPTARG
	 exit
         ;;
      i) # Install Script
         sbpinstall $OPTARG
	 exit
         ;;
      r) # Remove Script
         sbpremove $OPTARG
	 exit
         ;;
      h) # Help Function
	 help
	 exit
	 ;;
      -) # Parse Long Options
         case "${OPTARG}" in
            version) # Print Version
	       sbout "Package Management Scripts-V$SBPVer"
	       exit
       	       ;;
	    make) # Make Script
	       sbpmake $2
	       exit
	       ;;
	    install) # Install Script
	       sbpinstall $2
	       exit
	       ;;
	    remove) # Remove Script
	       sbpremove $2
	       exit
	       ;;
	    help) # Help Function
	       help
	       exit
	       ;;
	    *) # Invalid Long Option
	       echo "sbp: invalid option '--$OPTARG'"
	       help
	       exit 2
	       ;;
   	 esac
	 ;;
      \?) # Invalid option
         echo "sbp: invalid option '-$OPTARG'"
	 help
         exit 2
	 ;;
      :)
         echo "sbp: option '-$OPTARG' requires an argument"
	 help
         exit 2
         ;;
   esac
done
