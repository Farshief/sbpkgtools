#!/bin/bash

#####################
##################### SBPkgTools
##################### Written by Farshief
##################### https://www.github.com/farshief/sbpkgtools
#####################

### Variable Definitions
SBPVer=1.0.1
packagesDir=/packages
pkgbuildpath=$packagesDir/build
pkglogs=$pkgbuildpath/logs
REPO_core=$packagesDir/repo/core
Toolname="SBPkgTools"

### Function Definitions
## YAML Parsing
## Function by Stefan Farestam as posted here: https://stackoverflow.com/a/21189044
function parse_yaml {
   local prefix=$2
   local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
   sed -ne "s|^\($s\):|\1|" \
        -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
   awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
      }
   }'
}

## SBOut script - To print messages to the user in a standardized format
function sbout {
   local message=$1
   echo
   echo "*******"
   echo "***$Toolname: $message"
   echo "*******"
   echo
}

## Help Script
function help {
   echo "sbp"
   echo
   echo "Usage:"
   echo "    sbp -{m|i|r} <package>"
}

## Make Script
function sbpmake {
   echo $1
}

## Install Script
function sbpinstall {
   echo "."
}

## Remove Script
function sbpremove {
   echo ":"
}

### Actual Start of the User Interactive Script


## Parameter Handling
#***Reformat tabbing here in kate
while getopts ":vm:i:r:h-:" option; do
   case $option in
      v) # Print Version
	 sbout "Package Management Scripts-V$SBPVer"
         ;;
      m) # Make Script
         sbpmake $OPTARG
         ;;
      i) # Install Script
         sbpinstall $OPTARG
         ;;
      r) # Remove Script
         sbpremove $OPTARG
         ;;
      h) # Help Function
	 help
	 exit
	 ;;
      -) # Parse Long Options
         case "${OPTARG}" in
            version) # Print Version
	       sbout "Package Management Scripts-V$SBPVer"
       	       ;;
	    help) # Help Function
	       help
	       ;;
	    *) # Invalid Long Option
	       echo "sbp: invalid option '--$OPTARG'"
	       echo "Try 'sbp -h | --help' for more information"
	       ;;
   	 esac
	 ;;
      \?) # Invalid option
         echo "sbp: invalid option '-$OPTARG'"
	 echo "Try 'sbp -h | --help' for more information"
         exit
	 ;;
      :)
         echo "sbp: option '-$OPTARG' requires an argument"
	 echo "Try 'sbp -h | --help' for more information"
         exit
         ;;
   esac
done
