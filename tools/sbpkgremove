#!/bin/bash

PkgToolsRemoveVer=1.0
#####################
##################### SBPkgTools Remove Script
##################### Written by Farshief
#####################

# Variable Definitions
packagesDir=/packages
pkgbuildpath=$packagesDir/build
pkglogs=$pkgbuildpath/logs
REPO_core=$packagesDir/repo/core
DBpath=$packagesDir/packages.db
Toolname="SBPkgTools"

{											# Open Bracket for Logging

# Function Definitions
function parse_yaml { 									# YAML Parsing
   local prefix=$2									# Function by Stefan Farestam as posted here: https://stackoverflow.com/a/21189044
   local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
   sed -ne "s|^\($s\):|\1|" \
        -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
   awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
      }
   }'
}

clear

echo "*******"
echo "***$Toolname Remove Script V-$PkgToolsRemoveVer"
echo "*******"
echo

# Find Package

# Param Handling
if [ $# -gt 1 ] || [ $# -lt 1 ]											# If there is the wrong number of args
then
	echo "******"
	echo "$Toolname: Invalid Command"
	echo "$Toolname: Syntax is sbpkgremove <package name>"
	echo "*******"
	echo
	exit 1
else														# If exactly 1 arg was provided
	result=$(sqlite3 $DBpath "SELECT * FROM packages WHERE name='$1';")

	# check if package is in database
	if [[ -z $result ]]
	then
		# package not installed
		exit 1
	fi

	IFS='|' read -ra DBResult <<< "$result"

	pkgname=${DBResult[0]}
	pkgver=${DBResult[1]}
fi

# Find and ensure presence of package in repo



# Confirm Removal

echo
echo "*******"
echo "***$Toolname: Are you sure you wish to proceed with removing $pkgname-$pkgver?"
echo "*******"
echo

# Print amount of space to be cleared (installsize)

read -p "[Y/n]: " key                                                                                                # Give the user a final chance to back out

key=${key,,}                                                                                                        # Convert input to lowercase
if [ "$key" != "y" ] && [ "$key" != "yes" ] && [ "$key" != "" ]                                                        # If key is anything other than y|yes|<Enter>
then
        echo
        echo "*******"
        echo "***$Toolname: Installation Halted"
        echo "***$Toolname: Cleaning up and exiting"
        echo "*******"
        echo

#        rm -rf $repopath/$pkgselection                                                                                # Remove extracted package files
        exit 1
fi

# Check for dependencies? (save for later)

# Remove installed files

# test out: xargs rm -f <filelist

# Ask to remove config

# Run post remove

# Update database


mv $pkglogs/remove.log $pkglogs/$pkgselection-remove.log
} 2>&1 | tee $pkglogs/remove.log			
